"""
Django settings for health_server project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import configparser
import logging
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = configparser.RawConfigParser()
config.read(os.path.join(BASE_DIR, 'health_server/config.ini'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9tvcfffq1d0c!rufi!t0k@^0m9v19mlpmli6r5d0#=0ep&mm=k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean('settings', 'debug')

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'health_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'health_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': config.get('database', 'host'),  # 数据库主机
        'PORT': 3306,  # 数据库端口
        'USER': config.get('database', 'user'),  # 数据库用户名
        'PASSWORD': config.get('database', 'password'),  # 数据库用户密码
        'NAME': config.get('database', 'name'),  # 数据库名字
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

class MyFormatter(logging.Formatter):
    def format(self, record):
        if record.msg[0] == 'b' and record.msg[1] == "'":
            print("c={}".format(record.msg))
            tmp = eval(record.msg)
            if isinstance(tmp, bytes):
                record.msg = tmp.decode('utf8')

        result = logging.Formatter.format(self, record)

        return result

LOGGING = {
    'version': 1,  # 日志版本
    'disable_existing_loggers': False,  # True：disable原有日志相关配置
    'formatters': {  # 日志格式
        'verbose': {  # 详细格式
            '()': MyFormatter,
            'format': '{levelname} {asctime} {module} {process} {thread} {message}',
            'style': '{',
        },
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s',
            'style': '{',
        }
    },
    'filters': {  # 日志过滤器
        'require_debug_true': {  # 是否支持DEBUG级别日志过滤
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志handlers
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'file': {  # 文件handler
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': config.get('logging', 'file_path'),
            'formatter': 'verbose',
        },
        'console': {  # 控制器handler，INFO级别以上的日志都要Simple格式输出到控制台
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'debug-info': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'logs/info.log',
            'formatter': 'verbose',
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['file',],
            'level': 'DEBUG',  # change debug level as appropiate
            'propagate': False,
        },
        'debug-info-log': {
            'handlers': ['debug-info'],
            'level': 'DEBUG',
            'propagate': False
        }
    }
}

# 邮件服务器配置
EMAIL_HOST = config.get('email', 'email_host')
EMAIL_PORT = 465
EMAIL_HOST_USER = config.get('email', 'email_host_user')
EMAIL_HOST_PASSWORD = config.get('email', 'email_host_password')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_SSL = True
